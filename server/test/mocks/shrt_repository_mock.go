// Code generated by MockGen. DO NOT EDIT.
// Source: repository/shrt.go
//
// Generated by this command:
//
//	mockgen -source=repository/shrt.go -destination=test/mocks/shrt_repository_mock.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	entity "shrt-server/types/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockShrtRepository is a mock of ShrtRepository interface.
type MockShrtRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShrtRepositoryMockRecorder
}

// MockShrtRepositoryMockRecorder is the mock recorder for MockShrtRepository.
type MockShrtRepositoryMockRecorder struct {
	mock *MockShrtRepository
}

// NewMockShrtRepository creates a new mock instance.
func NewMockShrtRepository(ctrl *gomock.Controller) *MockShrtRepository {
	mock := &MockShrtRepository{ctrl: ctrl}
	mock.recorder = &MockShrtRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShrtRepository) EXPECT() *MockShrtRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockShrtRepository) Create(shrt *entity.Shrt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", shrt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockShrtRepositoryMockRecorder) Create(shrt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShrtRepository)(nil).Create), shrt)
}

// FindByLongURL mocks base method.
func (m *MockShrtRepository) FindByLongURL(longURL string) (*entity.Shrt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLongURL", longURL)
	ret0, _ := ret[0].(*entity.Shrt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLongURL indicates an expected call of FindByLongURL.
func (mr *MockShrtRepositoryMockRecorder) FindByLongURL(longURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLongURL", reflect.TypeOf((*MockShrtRepository)(nil).FindByLongURL), longURL)
}

// FindBySlug mocks base method.
func (m *MockShrtRepository) FindBySlug(slug string) (*entity.Shrt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySlug", slug)
	ret0, _ := ret[0].(*entity.Shrt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySlug indicates an expected call of FindBySlug.
func (mr *MockShrtRepositoryMockRecorder) FindBySlug(slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySlug", reflect.TypeOf((*MockShrtRepository)(nil).FindBySlug), slug)
}

// UpdateVisit mocks base method.
func (m *MockShrtRepository) UpdateVisit(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVisit", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVisit indicates an expected call of UpdateVisit.
func (mr *MockShrtRepositoryMockRecorder) UpdateVisit(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVisit", reflect.TypeOf((*MockShrtRepository)(nil).UpdateVisit), id)
}
